# Shallow Copy and Deep Copy: [Check DeepCopy.png and ShallowCopy.png files.]

Deep copy in Python
A deep copy creates a new compound object before inserting copies of the items found in the original into
it in a recursive manner.
It will first construct a new collection object and then recursively populate it with copies of the child
 objects found in the original. It means that any changes made to a copy of the object do not reflect in the
 original object.

 import copy

a = [[1, 2, 3], [4, 5, 6]]

# Creating a deep copy of the nested list 'a'
b = copy.deepcopy(a)

# Modifying an element in the deep-copied list
b[0][0] = 99
print(b)

Output
[[99, 2, 3], [4, 5, 6]]


Shallow copy:
A shallow copy creates a new object but retains references to the objects contained within the original.
It only copies the top-level structure without duplicating nested elements.
Changes made to a copy of an object do reflect in the original object.
In python, this is implemented using the "copy.copy()" function.

import copy

a = [[1, 2, 3], [4, 5, 6]]

# Creating a shallow copy of the nested list 'original'
b = copy.copy(a)

# Modifying an element in the shallow-copied list
b[0][0] = 99

# Printing the original and shallow-copied lists
print(b)

Output
[[99, 2, 3], [4, 5, 6]]